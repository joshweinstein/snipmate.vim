# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet m
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}


#
# Below are added by Josh
#
snippet cmd
	AM.Commands.${1:namespace} = function(${2:params}) {
		${3}
	};

	AM.Commands.$1.prototype = {
		execute: function() {
			${4}
		},

		undo: function() {
		}
	};

snippet desc
	describe("${1:context description or #method}", function() {
		${2}
	});
snippet bef
	beforeEach(function() {
		${1}
	});
snippet it
	it("${1:assertion}", function() {
		${2}
	});
snippet et
	expect(${1:actual}).toBeTruthy();${2}
snippet ent
	expect(${1:actual}).not.toBeTruthy();${2}
snippet ef
	expect(${1:actual}).toBeFalsy();${2}
snippet enf
	expect(${1:actual}).not.toBeFalsy();${2}
snippet ex
	expect(${1:actual).${2};${3}
snippet ee
	expect(${1:actual}).toEqual(${2:number});${3}
snippet ene
	expect(${1:actual}).not.toEqual(${2:number});${3}
snippet egt
	expect(${1:actual}).toBeGreaterThan(${2:number});${3}
snippet elt
	expect(${1:actual}).toBeLessThan(${2:number});${3}
snippet en
	expect(${1:actual}).toBeNull();${3}
snippet enn
	expect(${1:actual}).not.toBeNull();${3}
snippet eb
	expect(${1:actual}).toBe(${2:expected});${3}
snippet enb
	expect(${1:actual}).not.toBe(${2:expected});${3}
snippet ec
	expect(${1:actual}).toContain(${2:expected});${3}
snippet enc
	expect(${1:actual}).not.toContain(${2:expected});${3}
snippet em
	expect(${1:actual}).toMatch(${2:pattern});${3}
snippet enm
	expect(${1:actual}).not.toMatch(${2:pattern});${3}
snippet ed
	expect(${1:actual}).toBeDefined();${2}
snippet end
	expect(${1:actual}).not.toBeDefined();${2}
snippet s
	spyOn(${1:object}, "${2:method}");${3}
snippet sr
	spyOn(${1:object}, "${2:method}").andReturn(${3:arguments});${4}
snippet st
	spyOn(${1:object}, "${2:method}").andThrow(${3:exception});${4}
snippet sct
	spyOn(${1:object}, "${2:method}").andCallThrough();${3}
snippet scf
	spyOn(${1:object}, "${2:method}").andCallFake(${3:function});${4}
snippet esc
	expect(${1:target}).wasCalled();${2}
snippet escw
	expect(${1:target}).wasCalledWith(${2:arguments});${3}
snippet notsc
	expect(${1:target}).wasNotCalled();${2}
snippet notscw
	expect(${1:target}).wasNotCalledWith(${2:arguments});${3}
